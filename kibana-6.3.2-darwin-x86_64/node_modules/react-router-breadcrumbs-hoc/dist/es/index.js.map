{"version":3,"file":"index.js","sources":["../../src/index.js"],"sourcesContent":["import { createElement } from 'react';\nimport { matchPath, withRouter } from 'react-router';\n\nconst DEFAULT_MATCH_OPTIONS = { exact: true };\n\n// if user is passing a function (component) as a breadcrumb, make sure we\n// pass the match object into it. Else just return the string.\nconst renderer = ({ breadcrumb, match }) => {\n  if (typeof breadcrumb === 'function') {\n    return createElement(breadcrumb, { match });\n  }\n  return breadcrumb;\n};\n\nexport const getBreadcrumbs = ({ routes, pathname }) => {\n  const matches = [];\n\n  pathname\n    // remove trailing slash \"/\" from pathname (avoids multiple of the same match)\n    .replace(/\\/$/, '')\n    // split pathname into sections\n    .split('/')\n    // reduce over the sections and find matches from `routes` prop\n    .reduce((previous, current) => {\n      // combine the last route section with the current\n      // ex `pathname = /1/2/3 results in match checks for\n      // `/1`, `/1/2`, `/1/2/3`\n      const pathSection = !current ? '/' : `${previous}/${current}`;\n\n      let breadcrumbMatch;\n\n      routes.some(({ breadcrumb, matchOptions, path }) => {\n        if (!path) {\n          throw new Error('withBreadcrumbs: `path` must be provided in every route object');\n        }\n        if (!breadcrumb) {\n          return false;\n        }\n        const match = matchPath(pathSection, { ...(matchOptions || DEFAULT_MATCH_OPTIONS), path });\n\n        // if a route match is found ^ break out of the loop with a rendered breadcumb\n        // and match object to add to the `matches` array\n        if (match) {\n          breadcrumbMatch = {\n            breadcrumb: renderer({ breadcrumb, match }),\n            path,\n            match,\n          };\n          return true;\n        }\n\n        return false;\n      });\n\n      /* istanbul ignore else */\n      if (breadcrumbMatch) {\n        matches.push(breadcrumbMatch);\n      }\n\n      return pathSection === '/' ? '' : pathSection;\n    }, null);\n\n  return matches;\n};\n\nexport const withBreadcrumbs = routes => Component => withRouter(props =>\n  createElement(Component, {\n    ...props,\n    breadcrumbs: getBreadcrumbs({\n      pathname: props.location.pathname,\n      routes,\n    }),\n  }));\n"],"names":["DEFAULT_MATCH_OPTIONS","exact","renderer","breadcrumb","match","createElement","getBreadcrumbs","routes","pathname","matches","replace","split","reduce","previous","current","pathSection","breadcrumbMatch","some","matchOptions","path","Error","matchPath","push","withBreadcrumbs","withRouter","Component","props","location"],"mappings":";;;;;;;;;;;;;;;;;AAGA,IAAMA,wBAAwB,EAAEC,OAAO,IAAT,EAA9B;;;;AAIA,IAAMC,WAAW,SAAXA,QAAW,OAA2B;MAAxBC,UAAwB,QAAxBA,UAAwB;MAAZC,KAAY,QAAZA,KAAY;;MACtC,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;WAC7BE,cAAcF,UAAd,EAA0B,EAAEC,YAAF,EAA1B,CAAP;;SAEKD,UAAP;CAJF;;AAOA,AAAO,IAAMG,iBAAiB,SAAjBA,cAAiB,QAA0B;MAAvBC,MAAuB,SAAvBA,MAAuB;MAAfC,QAAe,SAAfA,QAAe;;MAChDC,UAAU,EAAhB;;;;GAIGC,OAFH,CAEW,KAFX,EAEkB,EAFlB;;GAIGC,KAJH,CAIS,GAJT;;GAMGC,MANH,CAMU,UAACC,QAAD,EAAWC,OAAX,EAAuB;;;;QAIvBC,cAAc,CAACD,OAAD,GAAW,GAAX,GAAoBD,QAApB,SAAgCC,OAApD;;QAEIE,wBAAJ;;WAEOC,IAAP,CAAY,iBAAwC;UAArCd,UAAqC,SAArCA,UAAqC;UAAzBe,YAAyB,SAAzBA,YAAyB;UAAXC,IAAW,SAAXA,IAAW;;UAC9C,CAACA,IAAL,EAAW;cACH,IAAIC,KAAJ,CAAU,gEAAV,CAAN;;UAEE,CAACjB,UAAL,EAAiB;eACR,KAAP;;UAEIC,QAAQiB,UAAUN,WAAV,eAA6BG,gBAAgBlB,qBAA7C,IAAqEmB,UAArE,IAAd;;;;UAIIf,KAAJ,EAAW;0BACS;sBACJF,SAAS,EAAEC,sBAAF,EAAcC,YAAd,EAAT,CADI;oBAAA;;SAAlB;eAKO,IAAP;;;aAGK,KAAP;KApBF;;;QAwBIY,eAAJ,EAAqB;cACXM,IAAR,CAAaN,eAAb;;;WAGKD,gBAAgB,GAAhB,GAAsB,EAAtB,GAA2BA,WAAlC;GA1CJ,EA2CK,IA3CL;;SA6CON,OAAP;CAhDK;;AAmDP,AAAO,IAAMc,kBAAkB,SAAlBA,eAAkB;SAAU;WAAaC,WAAW;aAC/DnB,cAAcoB,SAAd,eACKC,KADL;qBAEepB,eAAe;oBAChBoB,MAAMC,QAAN,CAAenB,QADC;;SAAf;SAHgD;KAAX,CAAb;GAAV;CAAxB;;;;"}